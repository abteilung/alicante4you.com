prototype(Abte.Site:Component.HeaderGrid) < prototype(Neos.Fusion:Component) {

    node = ${ node }
    @context {
        node = ${ this.node }
    }

    class = ''

    videoUrl = ${ q(node).property('oneVideo') }

    one = Neos.Fusion:Component {
        header = Neos.Neos:Editable {
            property = 'oneHeader'
            block = ${ false }
            @process.contentElementWrapping = Neos.Neos:ContentElementWrapping {
                @position = 'end'
            }
        }

        lead = Neos.Neos:Editable {
            property = 'oneLead'
            block = ${ true }
            @process.contentElementWrapping = Neos.Neos:ContentElementWrapping {
                @position = 'end'
            }
        }

        buttonText = Neos.Neos:Editable {
            property = 'oneText'
            block = ${ false }
        }

        target = ${ q(node).property('oneTarget') }

        videoUrl = ${ q(documentNode).property('oneVideo') }

        renderer = afx`

            <div class="relative w-full h-full">
                  
                <div 
                    class={props.videoUrl ? 'relative z-20 grid content-between h-full jarallax' : 'relative z-20 grid content-between h-full'}
                >
                    <div class="p-4 md:p-8 xl:p-12 2xl:p-16">
            
                        <p class="lead">
                            {props.lead}
                        </p>
                        <h1>
                            {props.header}
                        </h1>
                    </div>
                    
                    <div class="flex p-4 space-x-8 md:p-8 xl:p-12 2xl:p-16">
                        <Abte.Site:Content.Button 
                            class={ q(node).property('oneImage') ? 'bg-white !text-black' : 'bg-black text-white' }
                            target={props.target}
                            text={props.buttonText}
                        />
                        <div @if.hasVideo={props.videoUrl}>
                            <div 
                                "@click.prevent"="showVideo = !showVideo"
                                class="flex-row items-center space-x-2 text-white ex button"
                            >
                                Play Video
                            </div>
                        
                        </div>
                    </div>
                </div>
            </div>
        `
    }
    oneClass = 'roundedCorners grid relative bg-primary overflow-hidden box-h-2 row-span-2 col-span-1 md:col-span-2 headGrid'
    oneImage =  Sitegeist.Kaleidoscope:AssetImageSource {
        asset   = ${ q(node).property('oneImage') }
        width   = 800
    }
    oneTheme = ''
  
    two = ''
    twoClass = 'roundedCorners overflow-hidden relative bg-base-100 box-h-3 row-span-2 lg:row-span-1'
    twoTheme = ''
    
    three = ''
    threeClass = 'roundedCorners overflow-hidden relative bg-white md:box-h-2 row-span-2 box-shadow'
    hreeTheme = ''

    four = ''
    fourClass = 'roundedCorners relative bg-primary text-white box-h-1'
    fourTheme = ''

    five = ''
    fiveClass = 'roundedCorners relative bg-secondary text-white box-h-1'
    fiveTheme = ''

    renderer = afx`
        <div class={props.class + ' ' + 'headerGrid grid md:grid-cols-2 lg:grid-cols-3 gridgap'}>
            <div 
                @if.hasContent={props.one}
                class={props.oneClass + ' ' + ''} 
                data-theme={props.oneTheme}
                style={props.oneImage ? 'background: url(' + props.oneImage +') no-repeat center center; background-size: cover; ' : null }

                data-jarallax
                data-video-src={'https://www.youtube.com/watch?v=' + props.videoUrl}
            >
                <Abte.Site:Component.BackendIndicator label="1" />
                {props.one}
            </div>
            <div
                @if.hasContent={props.two}
                class={props.twoClass} data-theme={props.twoTheme}
            >
                <Abte.Site:Component.BackendIndicator label="2" />
                {props.two}
            </div>
            <div 
                @if.hasContent={props.three}
                class={props.threeClass} data-theme={props.threeTheme}
            >
                <Abte.Site:Component.BackendIndicator label="3" />
                {props.three}
            </div>

            <div 
                @if.hasContent={props.four}
                class={props.fourClass} data-theme={props.fourTheme}
            >
                <Abte.Site:Component.BackendIndicator label="4" />
                {props.four}
            </div>

            <div 
                @if.hasContent={props.five}
                class={props.fiveClass} data-theme={props.fiveTheme}
            >
                <Abte.Site:Component.BackendIndicator label="5" />
                {props.five}
            </div>

        </div>
    `
}


prototype(Abte.Site:Component.BackendIndicator) < prototype(Neos.Fusion:Component) {
    
    label = ''
    class = 'bg-error'
    theme = ''

    renderer = afx`
        <div 
            data-theme={props.theme}
            class={props.class + ' ' + 'absolute top-0 left-0 z-30 flex items-center justify-center w-5 h-5 text-sm'}
        >
            <div class="text-white">{props.label}</div>
        </div>
    `
    renderer.@if.IsInBackendOnly=${node.context.inBackend}
}